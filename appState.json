{"EDITOR_STATE":{"allProjectFiles":{"c6532eb1-026c-4f74-86f8-8a614110625e":{"id":"c6532eb1-026c-4f74-86f8-8a614110625e","parent":null,"name":"SLAppForgePaymentHandler","type":"DIRECTORY","isDirectory":true,"children":["09115132-a5ef-4bfb-83b5-f9673d5a1ccc"],"isRemovable":false,"filePath":"SLAppForgePaymentHandler"},"09115132-a5ef-4bfb-83b5-f9673d5a1ccc":{"id":"09115132-a5ef-4bfb-83b5-f9673d5a1ccc","parent":"c6532eb1-026c-4f74-86f8-8a614110625e","name":"lambda.js","type":"LAMBDA_FILE","isDirectory":false,"children":[],"isRemovable":true,"filePath":"SLAppForgePaymentHandler/lambda.js","code":"let AWS = require('aws-sdk');\nlet axios = require('axios');\n\nconst PAYPAL_API_BASE_URL = 'https://api.sandbox.paypal.com';\nconst CLIENT_KEY = process.env['PP_CLIENT_KEY'];\nconst CLIENT_SECRET = process.env['PP_CLIENT_SECRET'];\nconst PAY_AMOUNT = '1';\n\nexports.handler = function (event, context, callback) {\n\n\tlet resourcePath = event.resource;\n\tlet data = event.body;\n\n\tswitch (resourcePath) {\n\t\tcase '/createPayment':\n\t\t\tcreatePayment(data, callback);\n\t\t\tbreak;\n\t\tcase '/executePayment':\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tsendFailureResponse(callback);\n\t}\n\n\tconsole.log(event);\n\tsendSuccessResponse(callback, event);\n}\n\nfunction getAccessToken() {\n\treturn new Promise((resolve, reject) => {\n\t\taxios.post(`${PAYPAL_API_BASE_URL}/v1/oauth2/token?grant_type=client_credentials`, null, {\n\t\t\theaders: {\n\t\t\t\t'Accept': 'application/json',\n\t\t\t\t'Accept-Language': 'en_US',\n\t\t\t},\n\t\t\tauth: {\n\t\t\t\tusername: CLIENT_KEY,\n\t\t\t\tpassword: CLIENT_SECRET\n\t\t\t}\n\t\t}).then(response => {\n\t\t\tlet data = response.data;\n\t\t\tif (data && data['access_token']) {\n\t\t\t\tresolve(data['access_token']);\n\t\t\t} else {\n\t\t\t\treject('token not found');\n\t\t\t}\n\t\t}).catch(err => {\n\t\t\treject(err);\n\t\t});\n\t});\n};\n\nfunction createPayment(data, callback) {\n\n\tlet callbackUrl = data['callbackUrl'];\n\n\tgetAuthToken()\n\t\t.then(accessToken => {\n\t\t\tconsole.log(accessToken);\n\t\t\taxios.post(`${PAYPAL_API_BASE_URL}/v1/payments/payment`,\n\t\t\t\t{\n\t\t\t\t\t\"intent\": \"sale\",\n\t\t\t\t\t\"payer\": {\n\t\t\t\t\t\t\"payment_method\": \"paypal\"\n\t\t\t\t\t},\n\t\t\t\t\t\"transactions\": [\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\"amount\": {\n\t\t\t\t\t\t\t\t\"total\": PAY_AMOUNT,\n\t\t\t\t\t\t\t\t\"currency\": \"USD\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"description\": \"SLAppForge Sigma 1-year premium subscription\",\n\t\t\t\t\t\t}\n\t\t\t\t\t],\n\t\t\t\t\t// \"note_to_payer\": \"Contact us for any questions on your order.\",\n\t\t\t\t\t\"redirect_urls\": {\n\t\t\t\t\t\t\"return_url\": callbackUrl,\n\t\t\t\t\t\t\"cancel_url\": callbackUrl\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\theaders: {\n\t\t\t\t\t\t'Authorization': `Bearer ${accessToken}`\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.then(payPalResponse => {\n\t\t\t\t\tlet data = payPalResponse.data;\n\t\t\t\t\tif (data && data['id']) {\n\t\t\t\t\t\tconsole.log('Payment data', data);\n\t\t\t\t\t\tsendSuccessResponse(callback, {\n\t\t\t\t\t\t\tpaymentId: data['id']\n\t\t\t\t\t\t});\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.log('Payment ID is not available');\n\t\t\t\t\t\tsendFailureResponse(callback);\n\t\t\t\t\t}\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.log('Failed to create payment', err);\n\t\t\t\t\tsendFailureResponse(callback);\n\t\t\t\t});\n\t\t})\n\t\t.catch((err) => {\n\t\t\tconsole.log('Failed to get access token', err);\n\t\t\tsendFailureResponse(callback);\n\t\t});\n}\n\nfunction sendSuccessResponse(callback, data) {\n\tsendResponse(callback, data, 200);\n};\n\nfunction sendFailureResponse(callback) {\n\tsendResponse(callback, {}, 500);\n};\n\nfunction sendResponse(callback, data, statusCode) {\n\tcallback(null, {\n\t\t\"isBase64Encoded\": 1,\n\t\t\"statusCode\": statusCode,\n\t\t\"headers\": {\n\t\t\t'Access-Control-Allow-Origin': '*'\n\t\t},\n\t\t\"body\": JSON.stringify(data)\n\t});\n};\n\n\n\n\n\n","triggers":[{"resourceName":"apigusEast1slappforgePaymentscreatePaymentpost","config":{}},{"resourceName":"apigusEast1slappforgePaymentsexecutePaymentpost","config":{}}],"config":{"memory":128,"timeout":60,"runtime":"nodejs8.10"},"version":762,"syncVersion":297,"references":[],"testCases":{"79ac281e-09c1-4cf2-ab1d-f6cdb43ee00b":{"id":"79ac281e-09c1-4cf2-ab1d-f6cdb43ee00b","name":"Event1","functionId":"09115132-a5ef-4bfb-83b5-f9673d5a1ccc","event":"{\n    \"key1\": \"value1\",\n    \"key2\": \"value2\",\n    \"key3\": \"value3\"\n}"}}}},"rootNode":"c6532eb1-026c-4f74-86f8-8a614110625e","openFiles":["09115132-a5ef-4bfb-83b5-f9673d5a1ccc"],"currentFileId":"09115132-a5ef-4bfb-83b5-f9673d5a1ccc","resources":{"apigusEast1slappforgePaymentscreatePaymentpost":{"name":"apigusEast1slappforgePaymentscreatePaymentpost","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"slappforgePayments","endpointType":"EDGE","resourceMode":0,"resourceName":"createPayment","resourcePath":"/createPayment","restMethod":"POST","proxyIntegration":true,"enableCORS":true,"stageMode":0,"stageName":"test"},"globallyEditable":true},"apigusEast1slappforgePaymentsexecutePaymentpost":{"name":"apigusEast1slappforgePaymentsexecutePaymentpost","type":"API_GATEWAY","config":{"selectedRegion":"us-east-1","apiMode":0,"apiName":"slappforgePayments","endpointType":"EDGE","resourceMode":0,"resourceName":"executePayment","resourcePath":"/executePayment","restMethod":"POST","proxyIntegration":true,"enableCORS":true,"stageMode":0,"stageName":"test"},"globallyEditable":true}},"envVariables":[{"lambdaId":"all","varKey":"SIGMA_AWS_ACC_ID","varValue":null,"shouldPersist":false,"editable":false},{"lambdaId":"all","varKey":"PP_CLIENT_KEY","varValue":null,"shouldPersist":false,"editable":true},{"lambdaId":"all","varKey":"PP_CLIENT_SECRET","varValue":null,"shouldPersist":false,"editable":true}],"packageJSON":{"dependencies":{"aws-sdk":{"name":"aws-sdk","version":"2.176.0","notRemovable":true},"axios":{"name":"axios","downloadsLast30Days":8168574,"downloadsRatio":0.03942920090782887,"humanDownloadsLast30Days":"8.2m","popular":true,"version":"0.18.0","versions":{"0.1.0":"2014-08-29T23:08:36.810Z","0.2.0":"2014-09-12T20:06:33.167Z","0.2.1":"2014-09-12T22:57:28.872Z","0.2.2":"2014-09-15T03:30:45.994Z","0.3.0":"2014-09-16T18:20:18.668Z","0.3.1":"2014-09-17T00:31:29.538Z","0.4.0":"2014-10-05T23:55:03.069Z","0.4.1":"2014-10-15T18:19:42.549Z","0.4.2":"2014-12-11T07:14:52.563Z","0.5.0":"2015-01-23T10:15:47.657Z","0.5.1":"2015-03-10T20:47:18.932Z","0.5.2":"2015-03-13T23:14:22.809Z","0.5.3":"2015-04-08T03:01:17.936Z","0.5.4":"2015-04-08T18:49:41.745Z","0.6.0":"2015-09-21T20:20:20.241Z","0.7.0":"2015-09-29T06:36:55.850Z","0.8.0":"2015-12-11T19:09:50.663Z","0.8.1":"2015-12-15T03:44:16.229Z","0.9.0":"2016-01-18T18:19:24.356Z","0.9.1":"2016-01-24T22:19:01.689Z","0.10.0":"2016-04-21T04:52:22.553Z","0.11.0":"2016-04-27T04:19:52.831Z","0.11.1":"2016-05-17T15:59:30.342Z","0.12.0":"2016-06-01T05:22:58.397Z","0.13.0":"2016-07-13T19:42:43.558Z","0.13.1":"2016-07-16T17:13:24.859Z","0.14.0":"2016-08-27T18:30:22.182Z","0.15.0":"2016-10-11T04:40:41.633Z","0.15.1":"2016-10-15T06:39:23.761Z","0.15.2":"2016-10-18T01:33:20.989Z","0.15.3":"2016-11-27T21:59:11.250Z","0.16.0":"2017-04-01T02:31:09.040Z","0.16.1":"2017-04-08T18:51:59.217Z","0.16.2":"2017-06-03T19:29:23.765Z","0.17.0":"2017-10-21T18:01:30.232Z","0.17.1":"2017-11-11T23:24:40.635Z","0.18.0":"2018-02-19T23:28:54.151Z"},"tags":{"latest":"0.18.0"},"description":"Promise based HTTP client for the browser and node.js","dependencies":{"follow-redirects":"^1.3.0","is-buffer":"^1.1.5"},"devDependencies":{"bundlesize":"^0.5.7","coveralls":"^2.11.9","es6-promise":"^4.0.5","grunt":"^1.0.1","grunt-banner":"^0.6.0","grunt-cli":"^1.2.0","grunt-contrib-clean":"^1.0.0","grunt-contrib-nodeunit":"^1.0.0","grunt-contrib-watch":"^1.0.0","grunt-eslint":"^19.0.0","grunt-karma":"^2.0.0","grunt-ts":"^6.0.0-beta.3","grunt-webpack":"^1.0.18","istanbul-instrumenter-loader":"^1.0.0","jasmine-core":"^2.4.1","karma":"^1.3.0","karma-chrome-launcher":"^2.0.0","karma-coverage":"^1.0.0","karma-firefox-launcher":"^1.0.0","karma-jasmine":"^1.0.2","karma-jasmine-ajax":"^0.1.13","karma-opera-launcher":"^1.0.0","karma-safari-launcher":"^1.0.0","karma-sauce-launcher":"^1.1.0","karma-sinon":"^1.0.5","karma-sourcemap-loader":"^0.3.7","karma-webpack":"^1.7.0","load-grunt-tasks":"^3.5.2","minimist":"^1.2.0","sinon":"^1.17.4","webpack":"^1.13.1","webpack-dev-server":"^1.14.1","url-search-params":"^0.6.1","typescript":"^2.0.3"},"repository":{"url":"https://github.com/axios/axios","project":"axios","user":"axios","host":"github.com","path":"","head":"d59c70fdfd35106130e9f783d0dbdcddd145b58f","branch":"d59c70fdfd35106130e9f783d0dbdcddd145b58f"},"githubRepo":{"user":"axios","project":"axios","path":"","head":"d59c70fdfd35106130e9f783d0dbdcddd145b58f"},"gitHead":"d59c70fdfd35106130e9f783d0dbdcddd145b58f","readme":"# axios\n\n[![npm version](https://img.shields.io/npm/v/axios.svg?style=flat-square)](https://www.npmjs.org/package/axios)\n[![build status](https://img.shields.io/travis/axios/axios.svg?style=flat-square)](https://travis-ci.org/axios/axios)\n[![code coverage](https://img.shields.io/coveralls/mzabriskie/axios.svg?style=flat-square)](https://coveralls.io/r/mzabriskie/axios)\n[![npm downloads](https://img.shields.io/npm/dm/axios.svg?style=flat-square)](http://npm-stat.com/charts.html?package=axios)\n[![gitter chat](https://img.shields.io/gitter/room/mzabriskie/axios.svg?style=flat-square)](https://gitter.im/mzabriskie/axios)\n[![code helpers](https://www.codetriage.com/axios/axios/badges/users.svg)](https://www.codetriage.com/axios/axios)\n\nPromise based HTTP client for the browser and node.js\n\n## Features\n\n- Make [XMLHttpRequests](https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest) from the browser\n- Make [http](http://nodejs.org/api/http.html) requests from node.js\n- Supports the [Promise](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise) API\n- Intercept request and response\n- Transform request and response data\n- Cancel requests\n- Automatic transforms for JSON data\n- Client side support for protecting against [XSRF](http://en.wikipedia.org/wiki/Cross-site_request_forgery)\n\n## Browser Support\n\n![Chrome](https://raw.github.com/alrra/browser-logos/master/src/chrome/chrome_48x48.png) | ![Firefox](https://raw.github.com/alrra/browser-logos/master/src/firefox/firefox_48x48.png) | ![Safari](https://raw.github.com/alrra/browser-logos/master/src/safari/safari_48x48.png) | ![Opera](https://raw.github.com/alrra/browser-logos/master/src/opera/opera_48x48.png) | ![Edge](https://raw.github.com/alrra/browser-logos/master/src/edge/edge_48x48.png) | ![IE](https://raw.github.com/alrra/browser-logos/master/src/archive/internet-explorer_9-11/internet-explorer_9-11_48x48.png) |\n--- | --- | --- | --- | --- | --- |\nLatest â | Latest â | Latest â | Latest â | Latest â | 8+ â |\n\n[![Browser Matrix](https://saucelabs.com/open_sauce/build_matrix/axios.svg)](https://saucelabs.com/u/axios)\n\n## Installing\n\nUsing npm:\n\n```bash\n$ npm install axios\n```\n\nUsing bower:\n\n```bash\n$ bower install axios\n```\n\nUsing cdn:\n\n```html\n<script src=\"https://unpkg.com/axios/dist/axios.min.js\"></script>\n```\n\n## Example\n\nPerforming a `GET` request\n\n```js\n// Make a request for a user with a given ID\naxios.get('/user?ID=12345')\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n\n// Optionally the request above could also be done as\naxios.get('/user', {\n    params: {\n      ID: 12345\n    }\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming a `POST` request\n\n```js\naxios.post('/user', {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  })\n  .then(function (response) {\n    console.log(response);\n  })\n  .catch(function (error) {\n    console.log(error);\n  });\n```\n\nPerforming multiple concurrent requests\n\n```js\nfunction getUserAccount() {\n  return axios.get('/user/12345');\n}\n\nfunction getUserPermissions() {\n  return axios.get('/user/12345/permissions');\n}\n\naxios.all([getUserAccount(), getUserPermissions()])\n  .then(axios.spread(function (acct, perms) {\n    // Both requests are now complete\n  }));\n```\n\n## axios API\n\nRequests can be made by passing the relevant config to `axios`.\n\n##### axios(config)\n\n```js\n// Send a POST request\naxios({\n  method: 'post',\n  url: '/user/12345',\n  data: {\n    firstName: 'Fred',\n    lastName: 'Flintstone'\n  }\n});\n```\n\n```js\n// GET request for remote image\naxios({\n  method:'get',\n  url:'http://bit.ly/2mTM3nY',\n  responseType:'stream'\n})\n  .then(function(response) {\n  response.data.pipe(fs.createWriteStream('ada_lovelace.jpg'))\n});\n```\n\n##### axios(url[, config])\n\n```js\n// Send a GET request (default method)\naxios('/user/12345');\n```\n\n### Request method aliases\n\nFor convenience aliases have been provided for all supported request methods.\n\n##### axios.request(config)\n##### axios.get(url[, config])\n##### axios.delete(url[, config])\n##### axios.head(url[, config])\n##### axios.options(url[, config])\n##### axios.post(url[, data[, config]])\n##### axios.put(url[, data[, config]])\n##### axios.patch(url[, data[, config]])\n\n###### NOTE\nWhen using the alias methods `url`, `method`, and `data` properties don't need to be specified in config.\n\n### Concurrency\n\nHelper functions for dealing with concurrent requests.\n\n##### axios.all(iterable)\n##### axios.spread(callback)\n\n### Creating an instance\n\nYou can create a new instance of axios with a custom config.\n\n##### axios.create([config])\n\n```js\nvar instance = axios.create({\n  baseURL: 'https://some-domain.com/api/',\n  timeout: 1000,\n  headers: {'X-Custom-Header': 'foobar'}\n});\n```\n\n### Instance methods\n\nThe available instance methods are listed below. The specified config will be merged with the instance config.\n\n##### axios#request(config)\n##### axios#get(url[, config])\n##### axios#delete(url[, config])\n##### axios#head(url[, config])\n##### axios#options(url[, config])\n##### axios#post(url[, data[, config]])\n##### axios#put(url[, data[, config]])\n##### axios#patch(url[, data[, config]])\n\n## Request Config\n\nThese are the available config options for making requests. Only the `url` is required. Requests will default to `GET` if `method` is not specified.\n\n```js\n{\n  // `url` is the server URL that will be used for the request\n  url: '/user',\n\n  // `method` is the request method to be used when making the request\n  method: 'get', // default\n\n  // `baseURL` will be prepended to `url` unless `url` is absolute.\n  // It can be convenient to set `baseURL` for an instance of axios to pass relative URLs\n  // to methods of that instance.\n  baseURL: 'https://some-domain.com/api/',\n\n  // `transformRequest` allows changes to the request data before it is sent to the server\n  // This is only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // The last function in the array must return a string or an instance of Buffer, ArrayBuffer,\n  // FormData or Stream\n  // You may modify the headers object.\n  transformRequest: [function (data, headers) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `transformResponse` allows changes to the response data to be made before\n  // it is passed to then/catch\n  transformResponse: [function (data) {\n    // Do whatever you want to transform the data\n\n    return data;\n  }],\n\n  // `headers` are custom headers to be sent\n  headers: {'X-Requested-With': 'XMLHttpRequest'},\n\n  // `params` are the URL parameters to be sent with the request\n  // Must be a plain object or a URLSearchParams object\n  params: {\n    ID: 12345\n  },\n\n  // `paramsSerializer` is an optional function in charge of serializing `params`\n  // (e.g. https://www.npmjs.com/package/qs, http://api.jquery.com/jquery.param/)\n  paramsSerializer: function(params) {\n    return Qs.stringify(params, {arrayFormat: 'brackets'})\n  },\n\n  // `data` is the data to be sent as the request body\n  // Only applicable for request methods 'PUT', 'POST', and 'PATCH'\n  // When no `transformRequest` is set, must be of one of the following types:\n  // - string, plain object, ArrayBuffer, ArrayBufferView, URLSearchParams\n  // - Browser only: FormData, File, Blob\n  // - Node only: Stream, Buffer\n  data: {\n    firstName: 'Fred'\n  },\n\n  // `timeout` specifies the number of milliseconds before the request times out.\n  // If the request takes longer than `timeout`, the request will be aborted.\n  timeout: 1000,\n\n  // `withCredentials` indicates whether or not cross-site Access-Control requests\n  // should be made using credentials\n  withCredentials: false, // default\n\n  // `adapter` allows custom handling of requests which makes testing easier.\n  // Return a promise and supply a valid response (see lib/adapters/README.md).\n  adapter: function (config) {\n    /* ... */\n  },\n\n  // `auth` indicates that HTTP Basic auth should be used, and supplies credentials.\n  // This will set an `Authorization` header, overwriting any existing\n  // `Authorization` custom headers you have set using `headers`.\n  auth: {\n    username: 'janedoe',\n    password: 's00pers3cret'\n  },\n\n  // `responseType` indicates the type of data that the server will respond with\n  // options are 'arraybuffer', 'blob', 'document', 'json', 'text', 'stream'\n  responseType: 'json', // default\n\n  // `xsrfCookieName` is the name of the cookie to use as a value for xsrf token\n  xsrfCookieName: 'XSRF-TOKEN', // default\n\n  // `xsrfHeaderName` is the name of the http header that carries the xsrf token value\n  xsrfHeaderName: 'X-XSRF-TOKEN', // default\n\n  // `onUploadProgress` allows handling of progress events for uploads\n  onUploadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `onDownloadProgress` allows handling of progress events for downloads\n  onDownloadProgress: function (progressEvent) {\n    // Do whatever you want with the native progress event\n  },\n\n  // `maxContentLength` defines the max size of the http response content allowed\n  maxContentLength: 2000,\n\n  // `validateStatus` defines whether to resolve or reject the promise for a given\n  // HTTP response status code. If `validateStatus` returns `true` (or is set to `null`\n  // or `undefined`), the promise will be resolved; otherwise, the promise will be\n  // rejected.\n  validateStatus: function (status) {\n    return status >= 200 && status < 300; // default\n  },\n\n  // `maxRedirects` defines the maximum number of redirects to follow in node.js.\n  // If set to 0, no redirects will be followed.\n  maxRedirects: 5, // default\n\n  // `socketPath` defines a UNIX Socket to be used in node.js.\n  // e.g. '/var/run/docker.sock' to send requests to the docker daemon.\n  // Only either `socketPath` or `proxy` can be specified.\n  // If both are specified, `socketPath` is used.\n  socketPath: null, // default\n\n  // `httpAgent` and `httpsAgent` define a custom agent to be used when performing http\n  // and https requests, respectively, in node.js. This allows options to be added like\n  // `keepAlive` that are not enabled by default.\n  httpAgent: new http.Agent({ keepAlive: true }),\n  httpsAgent: new https.Agent({ keepAlive: true }),\n\n  // 'proxy' defines the hostname and port of the proxy server\n  // Use `false` to disable proxies, ignoring environment variables.\n  // `auth` indicates that HTTP Basic auth should be used to connect to the proxy, and\n  // supplies credentials.\n  // This will set an `Proxy-Authorization` header, overwriting any existing\n  // `Proxy-Authorization` custom headers you have set using `headers`.\n  proxy: {\n    host: '127.0.0.1',\n    port: 9000,\n    auth: {\n      username: 'mikeymike',\n      password: 'rapunz3l'\n    }\n  },\n\n  // `cancelToken` specifies a cancel token that can be used to cancel the request\n  // (see Cancellation section below for details)\n  cancelToken: new CancelToken(function (cancel) {\n  })\n}\n```\n\n## Response Schema\n\nThe response for a request contains the following information.\n\n```js\n{\n  // `data` is the response that was provided by the server\n  data: {},\n\n  // `status` is the HTTP status code from the server response\n  status: 200,\n\n  // `statusText` is the HTTP status message from the server response\n  statusText: 'OK',\n\n  // `headers` the headers that the server responded with\n  // All header names are lower cased\n  headers: {},\n\n  // `config` is the config that was provided to `axios` for the request\n  config: {},\n\n  // `request` is the request that generated this response\n  // It is the last ClientRequest instance in node.js (in redirects)\n  // and an XMLHttpRequest instance the browser\n  request: {}\n}\n```\n\nWhen using `then`, you will receive the response as follows:\n\n```js\naxios.get('/user/12345')\n  .then(function(response) {\n    console.log(response.data);\n    console.log(response.status);\n    console.log(response.statusText);\n    console.log(response.headers);\n    console.log(response.config);\n  });\n```\n\nWhen using `catch`, or passing a [rejection callback](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then) as second parameter of `then`, the response will be available through the `error` object as explained in the [Handling Errors](#handling-errors) section.\n\n## Config Defaults\n\nYou can specify config defaults that will be applied to every request.\n\n### Global axios defaults\n\n```js\naxios.defaults.baseURL = 'https://api.example.com';\naxios.defaults.headers.common['Authorization'] = AUTH_TOKEN;\naxios.defaults.headers.post['Content-Type'] = 'application/x-www-form-urlencoded';\n```\n\n### Custom instance defaults\n\n```js\n// Set config defaults when creating the instance\nvar instance = axios.create({\n  baseURL: 'https://api.example.com'\n});\n\n// Alter defaults after instance has been created\ninstance.defaults.headers.common['Authorization'] = AUTH_TOKEN;\n```\n\n### Config order of precedence\n\nConfig will be merged with an order of precedence. The order is library defaults found in [lib/defaults.js](https://github.com/axios/axios/blob/master/lib/defaults.js#L28), then `defaults` property of the instance, and finally `config` argument for the request. The latter will take precedence over the former. Here's an example.\n\n```js\n// Create an instance using the config defaults provided by the library\n// At this point the timeout config value is `0` as is the default for the library\nvar instance = axios.create();\n\n// Override timeout default for the library\n// Now all requests will wait 2.5 seconds before timing out\ninstance.defaults.timeout = 2500;\n\n// Override timeout for this request as it's known to take a long time\ninstance.get('/longRequest', {\n  timeout: 5000\n});\n```\n\n## Interceptors\n\nYou can intercept requests or responses before they are handled by `then` or `catch`.\n\n```js\n// Add a request interceptor\naxios.interceptors.request.use(function (config) {\n    // Do something before request is sent\n    return config;\n  }, function (error) {\n    // Do something with request error\n    return Promise.reject(error);\n  });\n\n// Add a response interceptor\naxios.interceptors.response.use(function (response) {\n    // Do something with response data\n    return response;\n  }, function (error) {\n    // Do something with response error\n    return Promise.reject(error);\n  });\n```\n\nIf you may need to remove an interceptor later you can.\n\n```js\nvar myInterceptor = axios.interceptors.request.use(function () {/*...*/});\naxios.interceptors.request.eject(myInterceptor);\n```\n\nYou can add interceptors to a custom instance of axios.\n\n```js\nvar instance = axios.create();\ninstance.interceptors.request.use(function () {/*...*/});\n```\n\n## Handling Errors\n\n```js\naxios.get('/user/12345')\n  .catch(function (error) {\n    if (error.response) {\n      // The request was made and the server responded with a status code\n      // that falls out of the range of 2xx\n      console.log(error.response.data);\n      console.log(error.response.status);\n      console.log(error.response.headers);\n    } else if (error.request) {\n      // The request was made but no response was received\n      // `error.request` is an instance of XMLHttpRequest in the browser and an instance of\n      // http.ClientRequest in node.js\n      console.log(error.request);\n    } else {\n      // Something happened in setting up the request that triggered an Error\n      console.log('Error', error.message);\n    }\n    console.log(error.config);\n  });\n```\n\nYou can define a custom HTTP status code error range using the `validateStatus` config option.\n\n```js\naxios.get('/user/12345', {\n  validateStatus: function (status) {\n    return status < 500; // Reject only if the status code is greater than or equal to 500\n  }\n})\n```\n\n## Cancellation\n\nYou can cancel a request using a *cancel token*.\n\n> The axios cancel token API is based on the withdrawn [cancelable promises proposal](https://github.com/tc39/proposal-cancelable-promises).\n\nYou can create a cancel token using the `CancelToken.source` factory as shown below:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar source = CancelToken.source();\n\naxios.get('/user/12345', {\n  cancelToken: source.token\n}).catch(function(thrown) {\n  if (axios.isCancel(thrown)) {\n    console.log('Request canceled', thrown.message);\n  } else {\n    // handle error\n  }\n});\n\naxios.post('/user/12345', {\n  name: 'new name'\n}, {\n  cancelToken: source.token\n})\n\n// cancel the request (the message parameter is optional)\nsource.cancel('Operation canceled by the user.');\n```\n\nYou can also create a cancel token by passing an executor function to the `CancelToken` constructor:\n\n```js\nvar CancelToken = axios.CancelToken;\nvar cancel;\n\naxios.get('/user/12345', {\n  cancelToken: new CancelToken(function executor(c) {\n    // An executor function receives a cancel function as a parameter\n    cancel = c;\n  })\n});\n\n// cancel the request\ncancel();\n```\n\n> Note: you can cancel several requests with the same cancel token.\n\n## Using application/x-www-form-urlencoded format\n\nBy default, axios serializes JavaScript objects to `JSON`. To send data in the `application/x-www-form-urlencoded` format instead, you can use one of the following options.\n\n### Browser\n\nIn a browser, you can use the [`URLSearchParams`](https://developer.mozilla.org/en-US/docs/Web/API/URLSearchParams) API as follows:\n\n```js\nvar params = new URLSearchParams();\nparams.append('param1', 'value1');\nparams.append('param2', 'value2');\naxios.post('/foo', params);\n```\n\n> Note that `URLSearchParams` is not supported by all browsers (see [caniuse.com](http://www.caniuse.com/#feat=urlsearchparams)), but there is a [polyfill](https://github.com/WebReflection/url-search-params) available (make sure to polyfill the global environment).\n\nAlternatively, you can encode data using the [`qs`](https://github.com/ljharb/qs) library:\n\n```js\nvar qs = require('qs');\naxios.post('/foo', qs.stringify({ 'bar': 123 }));\n```\n\n### Node.js\n\nIn node.js, you can use the [`querystring`](https://nodejs.org/api/querystring.html) module as follows:\n\n```js\nvar querystring = require('querystring');\naxios.post('http://something.com/', querystring.stringify({ foo: 'bar' }));\n```\n\nYou can also use the [`qs`](https://github.com/ljharb/qs) library.\n\n## Semver\n\nUntil axios reaches a `1.0` release, breaking changes will be released with a new minor version. For example `0.5.1`, and `0.5.4` will have the same API, but `0.6.0` will have breaking changes.\n\n## Promises\n\naxios depends on a native ES6 Promise implementation to be [supported](http://caniuse.com/promises).\nIf your environment doesn't support ES6 Promises, you can [polyfill](https://github.com/jakearchibald/es6-promise).\n\n## TypeScript\naxios includes [TypeScript](http://typescriptlang.org) definitions.\n```typescript\nimport axios from 'axios';\naxios.get('/user?ID=12345');\n```\n\n## Resources\n\n* [Changelog](https://github.com/axios/axios/blob/master/CHANGELOG.md)\n* [Upgrade Guide](https://github.com/axios/axios/blob/master/UPGRADE_GUIDE.md)\n* [Ecosystem](https://github.com/axios/axios/blob/master/ECOSYSTEM.md)\n* [Contributing Guide](https://github.com/axios/axios/blob/master/CONTRIBUTING.md)\n* [Code of Conduct](https://github.com/axios/axios/blob/master/CODE_OF_CONDUCT.md)\n\n## Credits\n\naxios is heavily inspired by the [$http service](https://docs.angularjs.org/api/ng/service/$http) provided in [Angular](https://angularjs.org/). Ultimately axios is an effort to provide a standalone `$http`-like service for use outside of Angular.\n\n## License\n\nMIT\n","owner":{"name":"axios","avatar":"https://github.com/axios.png","link":"https://github.com/axios"},"deprecated":false,"homepage":null,"license":"MIT","keywords":["xhr","http","ajax","promise","node"],"computedKeywords":[],"computedMetadata":{},"created":1409353716810,"modified":1526428697722,"lastPublisher":{"name":"emilyemorehouse","email":"emilyemorehouse@gmail.com","avatar":"https://gravatar.com/avatar/8bd5c7e278d89616b381107f33d9ba9c","link":"https://www.npmjs.com/~emilyemorehouse"},"owners":[{"name":"mzabriskie","email":"mzabriskie@gmail.com","avatar":"https://gravatar.com/avatar/eb1b97d30df2c314fa4bc90c92f9768c","link":"https://www.npmjs.com/~mzabriskie"},{"name":"nickuraltsev","email":"nick.uraltsev@gmail.com","avatar":"https://gravatar.com/avatar/fc0b308a8511639f1ddd42cf81feb6b5","link":"https://www.npmjs.com/~nickuraltsev"}],"lastCrawl":"2018-05-15T23:58:18.741Z","_searchInternal":{"concatenatedName":"axios","alternativeNames":["axios","axios","axios"],"popularName":"axios","downloadsMagnitude":7},"dependents":5600,"humanDependents":"5.6k","changelogFilename":"https://raw.githubusercontent.com/axios/axios/d59c70fdfd35106130e9f783d0dbdcddd145b58f/CHANGELOG.md","objectID":"axios","_highlightResult":{"name":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]},"description":{"value":"Promise based HTTP client for the browser and node.js","matchLevel":"none","matchedWords":[]},"owner":{"name":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]}},"keywords":[{"value":"xhr","matchLevel":"none","matchedWords":[]},{"value":"http","matchLevel":"none","matchedWords":[]},{"value":"ajax","matchLevel":"none","matchedWords":[]},{"value":"promise","matchLevel":"none","matchedWords":[]},{"value":"node","matchLevel":"none","matchedWords":[]}],"owners":[{"name":{"value":"mzabriskie","matchLevel":"none","matchedWords":[]}},{"name":{"value":"nickuraltsev","matchLevel":"none","matchedWords":[]}}],"_searchInternal":{"concatenatedName":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]},"popularName":{"value":"<em>axios</em>","matchLevel":"full","fullyHighlighted":true,"matchedWords":["axios"]}}}}}},"lambdaId":"09115132-a5ef-4bfb-83b5-f9673d5a1ccc"},"PROJECT_META":{"projectName":"SLAppForgePaymentHandler","projectDescription":"","projectVersion":"1.0.0","projectRegion":"us-east-1","repoName":"SLAppForgePaymentHandler","repoUrl":"https://github.com/sigmaidetest/SLAppForgePaymentHandler","lastSave":1526639461797}}